<%= import_contracts ~w(NonFungibleToken BSListings) %>

// This transction uses the NFTMinter resource to mint a new NFT.
//
// It must be run with the account that has the minter resource
// stored at path /storage/NFTMinter.

transaction(recipient: Address, listingID: String, beneficiaries: {Address: UFix64}) {

  // local variable for storing the minter reference
  let minter: &BSListings.NFTMinter

  prepare(signer: AuthAccount) {

    // borrow a reference to the NFTMinter resource in storage
    self.minter = signer.borrow<&BSListings.NFTMinter>(from: BSListings.MinterStoragePath)
      ?? panic("Could not borrow a reference to the NFT minter")
  }

  execute {
    // get the public account object for the recipient
    let recipient = getAccount(recipient)

    // borrow the recipient's public NFT collection reference
    let receiver = recipient
      .getCapability(BSListings.CollectionPublicPath)!
      .borrow<&{NonFungibleToken.CollectionPublic}>()
        ?? panic("Could not get receiver reference to the NFT Collection")

    // mint the NFT and deposit it to the recipient's collection
    self.minter.mintNFT(recipient: receiver, listingID: listingID, beneficiaries: beneficiaries)
  }
}
