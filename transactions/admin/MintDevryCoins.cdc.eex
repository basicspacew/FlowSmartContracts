<%= import_contracts ~w(FungibleToken DevryCoin) %>

transaction(amount: UFix64) {
  let tokenAdmin: &DevryCoin.Administrator
  let tokenReceiver: &{FungibleToken.Receiver}

  prepare(signer: AuthAccount) {
    self.tokenAdmin = signer.borrow<&DevryCoin.Administrator>(from: DevryCoin.AdminStoragePath)
      ?? panic("Signer is not the token admin")

    self.tokenReceiver = getAccount(<%= @address %>)
      .getCapability(DevryCoin.ReceiverPublicPath)!
      .borrow<&{FungibleToken.Receiver}>()
        ?? panic("Unable to borrow receiver reference")
  }

  execute {
    let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
    let mintedVault <- minter.mintTokens(amount: amount)

    self.tokenReceiver.deposit(from: <-mintedVault)

    destroy minter
  }
}
